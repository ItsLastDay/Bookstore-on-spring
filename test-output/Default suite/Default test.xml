<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="Asus-PC" name="Default test" tests="11" failures="0" timestamp="29 Aug 2014 05:43:31 GMT" time="0.415" errors="0">
  <testcase name="@BeforeSuite setUp" time="0.0" classname="springapp.library.test.LogicTest">
    <failure type="org.apache.tools.ant.BuildException" message="com.microsoft.sqlserver.jdbc.SQLServerException: Не удалось установить соединение TCP/IP к серверу localhost123 по порту 1433. Ошибка: &amp;quot;null. Проверьте свойства соединения. Убедитесь, что на сервере запущен экземпляр SQL Server и он принимает TCP/IP-соединения по порту. Убедитесь, что TCP-соединения по этому порту не блокируются брандмауэром.&amp;quot;.">
      <![CDATA[C:\Users\Asus\workspace\Prak6\db\build_db.xml:9: com.microsoft.sqlserver.jdbc.SQLServerException: Не удалось установить соединение TCP/IP к серверу localhost123 по порту 1433. Ошибка: "null. Проверьте свойства соединения. Убедитесь, что на сервере запущен экземпляр SQL Server и он принимает TCP/IP-соединения по порту. Убедитесь, что TCP-соединения по этому порту не блокируются брандмауэром.".
	at org.apache.tools.ant.taskdefs.JDBCTask.getConnection(JDBCTask.java:385)
	at org.apache.tools.ant.taskdefs.SQLExec.getConnection(SQLExec.java:942)
	at org.apache.tools.ant.taskdefs.SQLExec.execute(SQLExec.java:614)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:392)
	at org.apache.tools.ant.Target.performTasks(Target.java:413)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at springapp.library.test.LogicTest.setUp(LogicTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:277)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Не удалось установить соединение TCP/IP к серверу localhost123 по порту 1433. Ошибка: "null. Проверьте свойства соединения. Убедитесь, что на сервере запущен экземпляр SQL Server и он принимает TCP/IP-соединения по порту. Убедитесь, что TCP-соединения по этому порту не блокируются брандмауэром.".
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(SQLServerException.java:190)
	at com.microsoft.sqlserver.jdbc.SQLServerException.ConvertConnectExceptionToSQLServerException(SQLServerException.java:241)
	at com.microsoft.sqlserver.jdbc.SocketFinder.findSocket(IOBuffer.java:2243)
	at com.microsoft.sqlserver.jdbc.TDSChannel.open(IOBuffer.java:491)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:1309)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.login(SQLServerConnection.java:991)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connect(SQLServerConnection.java:827)
	at com.microsoft.sqlserver.jdbc.SQLServerDriver.connect(SQLServerDriver.java:1012)
	at org.apache.tools.ant.taskdefs.JDBCTask.getConnection(JDBCTask.java:370)
	... 32 more
]]>
    </failure>
  </testcase> <!-- @BeforeSuite setUp -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.001" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="@BeforeMethod startTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTrans -->
  <testcase name="@AfterMethod commitTrans" time="0.0" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- @AfterMethod commitTrans -->
  <testcase name="addExistantAuthorToExistantBook" time="0.008" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addExistantAuthorToExistantBook -->
  <testcase name="addExistantBookToNewOrder" time="0.009" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addExistantBookToNewOrder -->
  <testcase name="addExistingBookToExistingOrder" time="0.004" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addExistingBookToExistingOrder -->
  <testcase name="addNewCityThroughNewClient" time="0.004" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addNewCityThroughNewClient -->
  <testcase name="addNewGenreWithExistantBook1" time="0.003" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addNewGenreWithExistantBook1 -->
  <testcase name="addNewGenreWithExistantBook2" time="0.003" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addNewGenreWithExistantBook2 -->
  <testcase name="addNewPublisherThroughNewBook" time="0.003" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- addNewPublisherThroughNewBook -->
  <testcase name="equalityOfBooks" time="0.004" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- equalityOfBooks -->
  <testcase name="exampleFilter" time="0.002" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- exampleFilter -->
  <testcase name="readOrder" time="0.003" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- readOrder -->
  <testcase name="readPushkin" time="0.003" classname="springapp.library.test.LogicTest">
    <skipped/>
  </testcase> <!-- readPushkin -->
</testsuite> <!-- Default test -->
